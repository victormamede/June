[gd_scene load_steps=4 format=2]

[ext_resource path="res://sprites/vignette.png" type="Texture" id=1]

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;

uniform float blur_strength = 1.0;
uniform float opacity: hint_range(0.0, 1.0) = 0.2;
uniform float bloom_intensity: hint_range(0.0, 1.0) = 1.0;
uniform float bloom_threshold: hint_range(0.0, 1.0) = 0.8;
uniform int bloom_scale: hint_range(0, 25) = 10;
uniform sampler2D vignette;

void fragment() {
	vec3 vignette_color = texture(vignette, UV).rgb;
	// Screen texture stores gaussian blurred copies on mipmaps.
	COLOR.rgb = textureLod(SCREEN_TEXTURE, SCREEN_UV, (1.0 - vignette_color.r) * blur_strength).rgb;
	COLOR.rgb *= clamp(texture(vignette, UV).rgb + 1.0 - opacity, 0.0, 1.0);
	
	for(int i = 1; i <= bloom_scale; i++) {
		vec4 left = texture(SCREEN_TEXTURE, SCREEN_UV - vec2(SCREEN_PIXEL_SIZE.x * float(i), 0.0));
		float left_intensity = (left.r + left.g + left.b) / 3.0;
		if(left_intensity > bloom_threshold) {
			COLOR += (left * bloom_intensity / (float(i)));
		}
		
		vec4 right = texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE.x * float(i), 0.0));
		float right_intensity = (right.r + right.g + right.b) / 3.0;
		if(right_intensity > bloom_threshold) {
			COLOR += (right * bloom_intensity / (float(i)));
		}
	}
}
"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 19 )
shader_param/blur_strength = 1.4
shader_param/opacity = 0.52
shader_param/bloom_intensity = 0.06
shader_param/bloom_threshold = 0.8
shader_param/bloom_scale = 8
shader_param/vignette = ExtResource( 1 )

[node name="CanvasLayer" type="CanvasLayer"]

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 18 )
anchor_right = 1.0
anchor_bottom = 1.0
